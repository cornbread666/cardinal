document.addEventListener("DOMContentLoaded", () => {

  class Timer {
    constructor() {
      this.isRunning = false;
      this.startTime = 0;
      this.overallTime = 0;
    }

    _getTimeElapsedSinceLastStart() {
      if (!this.startTime) {
        return 0;
      }
      return Date.now() - this.startTime;
    }

    start() {
      if (this.isRunning) {
        return console.error('Timer is already running');
      }
      //console.log("timer started");
      this.isRunning = true;
      this.startTime = Date.now();
    }

    stop() {
      if (!this.isRunning) {
        return console.error('Timer is already stopped');
      }
      //console.log("timer stopped");
      this.isRunning = false;
      this.overallTime = this.overallTime + this._getTimeElapsedSinceLastStart();
    }

    reset() {
      this.overallTime = 0;
      if (this.isRunning) {
        this.startTime = Date.now();
        return;
      }
      this.startTime = 0;
    }

    getTime() {
      if (!this.startTime) {
        return 0;
      }
      if (this.isRunning) {
        return this.overallTime + this._getTimeElapsedSinceLastStart();
      }
      return this.overallTime;
    }
  }

  gameBoard = document.getElementById("board");
  keyBoard = document.getElementById("keyboard-container");
  header = document.getElementById("header");
  modal = document.getElementById("modal_container");
  style = getComputedStyle(document.documentElement);

  grid = Array.from(Array(5), () => new Array(5).fill(0)); // 2d array for tracking color

  drag = false; // is mouse / touch being dragged?
  clicked = Array.from(Array(5), () => new Array(5).fill(0)); // 2d array for mouse drag
  currentColor = 1; // index for color selection array

  cors = [];
  compassNESW = [];
  blanks = [];

  highlighted = false;
  colorMode = "light";

  timer = new Timer();

  practice = true;
  activeGame = false;
  index = 0;
  mn = 1;
  firstTime = false;
  gameWon = false;

  var timerInterval;
  var practiceInterval;

  puzzles = ["x", "x", "x", "x", "x", "x",
  // sunday through saturday, row begins with sunday.
  // 6 - 12
  "223014441133034161052002", "30030024032044200650330121", "420314210020751012002731", "434033128027001400350012", "410320321033310001011167", "23424100102500533015044032", "421114124046220242020001",
  // 13 - 19
  "403411430025410601213002", "334314239305002140053110", "040044127700021010015510", "413324125037212120041001", "411223101031103134300234", "04220043240010140730301211", "201342040234352020423100",
  // 20 - 26
  "044331122600700500213014", "41334001006510340015013003", "242104009405363011000100", "433000233045002202105115", "002224200130241064050211", "300143140210356050151200", "214004013453002226000130",
  // 27 - 33
  "0422123148001120301442020133", "300001220550031003601333", "122214202860521420030200", "40231233002050375510022013", "403203340046123133202003", "023440204320420500420211", "241410325402000104532111",
  // 34 - 40
  "2312243058202003200401240131",  "241340203402420100420024", "034041112850000300121143", "1244221120038006015421001020", "223313435205001111336013", "41112333501600205510004400", "042230449600241202101002",
  // 41 - 47
  "013023033610046102411110012023", "103004420142022067000031", "03440131163060042210310110", "4014340300143301530153002032", "124123143003305632011102", "432230031021521402202630", "33011342125354003002301410",
  // 48 - 54
  "1222233110242563010052030212202230", "240131435106463013100011", "204432400135000300550063", "001113310360010016303232021022", "102402430331220412005004", "04124043220033020057003300", "133023433232003603205002",
  // 55 - 61
  "04302123220005503114322212132023", "321300233412101306400341", "31130421025050041300342130", "023034115520022023000360002033", "123422200033400345210213", "041242020400861220240120", "24331341520202203004402500",
  // 62 - 68
  "1203144378114300120110210010122132", "044224013200604723003200", "11442341421310012135102323", "00304313033002861022013112202233", "202343020420510420221340", "42033100105510103147010023", "023031044320056100132500",
  // 69 - 75
  "011333312450660002200220021221233233", "220344144301640040022301", "231203006830133020100200", "02123141420002520383300301102233", "14214213010120265045330023", "342021120100005727400330", "1231403422233004004322041233",
  // 76 - 82
  "34041033540032000032511510112130", "122201030340584033001010", "234312103002500205730112", "0113204123501410013120531322", "143122433402522621111000", "23421031301630010222028332", "3240041311330079040010001321",
  // 83 - 89
  "102123320033330000331353011013233032", "34331211100455102024242011", "333400406105530501400001", "03243442740040054200300100213033", "244432130102300263055203", "0111044459500430220000020112", "404431040026200302533200",
  // 90 - 96
  "121340430310012100375035000310122330", "40332104003111443234200023", "013330132770451000230022", "441103334007201312106402132230", "241330404303310200250051", "43031130301202200540014632", "120440002312360000430210",
  // 97 - 103
  "21122333001301423630600301031013213132", "21234202002322323032531031", "202302310013443112402220", "22310413263021005400510103121332", "443024424004001450064003", "214003343113004135302000", "2043023202133045243000110112",
  // 104 - 110
  "121331321033010004617106021013202330", "334014007204002124020340", "330040244214021000214105", "01142144330002002354700401202230", "112234135401114453010012", "01044223352020005024133123", "1244200102523003054111100231",
  // 111 - 117
  "0113324325102123430100330212303032", "331004412005035237003002", "42122310201101433322032222", "234132005103101002860300012331", "01043244112035002022700330", "034210413320004305622002", "0321314414204126121030031022",
  // 118 - 124
  "0114302415303002044213001013233133", "13412114463120223013100222", "440041232001047030133232", "132403417302240011203034001122", "021134407600016253020010", "004221240510002004535005", "2234044132122201740020111120",
  // 125 - 131
  "31022420212204403501001310122333", "410314200053410020010361", "23304420512902105005012003", "340130225301341002101056101232", "30233301022455100044023011", "44401300000200653400036032", "1331022223400031002085130330",
  // 132 - 138
  "33043230001023004523005700212332", "211223412015353203411020", "04123031320040020143046232", "00032244032014302112600310202230", "111033410330011230462032", "10213343030011685203002113", "1404403257008400000230021031",
  // 139 - 145
  "04122134430010005423420112202133", "213314001152552021030220", "143043042500005760032000", "04304321370002202002303600112022", "441401410002850256300020", "440240231000640000762026", "0341212412205039032024001333",
  // 146 - 152
  "34301113320203312111321401202332", "01232103574001210641012000", "043212003200124034210620", "22440221224630043100341010133032", "410340020074023000153510", "314312042222204641031000", "2043111406630021023422000230",
  // 153 - 159
  "2104443320253200300061130102102033", "123344304235512510010210", "12143242333513007203002120", "411110341075026303220100032123", "344210222202300203411045", "04004112020005603033035111", "123133140142101583031400032031",
  // 160 - 166
  "30442114035520020153220203203033", "203144030760201510052100", "22112442126455220001102011", "30341402012134005500543001111330", "231110044730037103221000", "0131433410104225400331051331", "322204428205114141000031001132",
  // 167 - 173
  "2001322303321020104615200110233233", "340222414303532011222002", "12410104142000635620120022", "121431445600610500522000102023", "101314420022340054034022", "004423320320300441154200", "0222034153001641042030021133",
  // 174 - 180
  "1112431435003024400414010001031133", "203424310387230040030020", "23420232003340025310124320", "004403330100400075103034011020", "114310400273202401120034", "02113342673003600100300101", "4322210410336523102501001121",
  // 181 - 187
  "32032240033003304125004400101220", "431100445002055005700001", "411231425016003200220065", "34221113330055343102012011212331", "343002146501004331004202", "21113124300302522420340321", "3014020005822301442002000213",
  // 188 - 194
  "1100411207600230200203610212203033", "041102340100055178001201", "33013034301401300114540230", "214210042552004201014300031231", "241344415004651420021000", "0213204223100131056300422133", "423130110075124200030133022231",
  // 195 - 201
  "21120134373100332100310401111331", "304302130023401303504101", "02120343530023100230502530", "12103230365201330251010002112023", "130012415424010018402001", "22113331404700010222232010111201", "320221100284222003310301022123",
  // 202 - 208
  "44031321800510104320300300303233", "301142140254114500202400", "4411214120025322018400110022", "31141042310334020253101101113033", "140230246302420000017700", "2111432354230053201301210122", "231230416038153001010030031332",
  // 209 - 215
  "31231014046131250421000100011223", "114240042113004200344600", "13441130500310020572044122", "21330410376050050100002301113233", "00400144042000540350300413", "2043022104760021035003100220", "13241040571112020033002301111333",
  // 216 - 222
  "2042132403221031301552020103132230", "142332104003343143110012", "1131044142020373450010000212", "24011410230012108502041011203133", "202234140223363301003203", "24330003540193050020001010", "1240430441130014402334001323",
  // 223 - 229
  "1100431403400630203420030103123133", "124240002510005300020580", "4143244000113014510600260323", "32404114202500590021030001132230", "332111033027056055010010", "24220014230036110530400421", "3200300211560210047200201222",
  // 230 - 236
  "42103302504600122024121000112022", "231112043621251041031200", "4220243250590024110200100311", "23340020551050060230020110213133", "001421340230100234425202", "0342304332202036013400211332", "344000146404003403204003032231",
  // 237 - 243
  "02314313246000223011520001203133", "233402204402010004400433", "04142430520065001100033311", "24110320440205304200020000102231", "310023040076012067101000", "0421313344004144121013201032", "322204428205114141000031001132",
  // 244 - 250
  "3141012413852001220031040220223133", "144313003004303366000320", "2011431305411275101112000313", "32400334203600042220440003122133", "232001240310055215500100", "3123023340166610002000330332", "3241041101520033330053021030",
  // 251 - 257
  "4043101300122021057422310312213033", "113401030240530356001010", "22013414453124303400000121", "122200032100055007500320001013213032", "010330332420385002104002", "1030444202850055300320000330", "133122442310012083371001000220",
  // 258 - 264
  "3221030125302231044022100210132230", "010442300320350020430013", "20213414067401541201100012", "3304102375125200031101310011212331", "403023440053002531472001", "1330031038200122343000220111", "112402215532110001300650002233",
  // 265 - 271
  "30240211022056023520200101103033", "300222340111444024311100", "3432132101024005211436302231", "30210004034004810320420003122130", "332123147007210047302003", "43210123201354330240013112", "4401401260052110003402520312",
  // 272 - 278
  "23120040033012430530003000031132", "413322010063510120222240", "2023244102642115000120420230", "22411044105400310562000102101222", "320120441266211003531002", "4024120000532003353100100210", "144110343102201202534202001323",
  // 279 - 285
  "34140142120074025720100000011320", "024211345510301204621100", "44204004300202770043130030", "03332401112070048601100000022131", "341003412004043255100030", "4114404400656104000410031023", "042343415200111340355004122230",
  // 286 - 292
  "31141042310334020253101101113033", "214123242115303420251300", "0220403435500123005312010212", "30442114035520020153220103203033", "142241203202411320530002", "40431114003420251235110022", "411003342033022232004105122230",
  // 293 - 299
  "03240120051001022330066100021131", "044013442300004664021001", "1332204303313216032300210313", "03002423211009500201330011202333", "033244425320512600022022", "1024433000657302002201111032", "032110431520001105432033021322",
  // 300 - 306
  "111213320001454300014540010210122021303132", "220131440055241031423000", "40320201008450150130031002", "43010432502633003300100200123133", "214124331156402512020101", "11240030063043010460010001", "4332002220211054035052011221",
  // 307 - 313
  "12330241154013117520100000122032", "330421100220230014630332", "44411304400440155104130023", "14204003100101330063451000031122", "320034013533052020040130", "01440413562020011300670031", "120043041451064040011200012331",
  // 314 - 320
  "12420431640300541300010201102133", "021132411430310212732011", "1013224005404015136100201222", "10412440029510351301000102212332", "034412407410400113500023", "3242102420240031055320041223", "2432201312033222034512002131",
  // 321 - 327
  "43400421104500664000110212213032", "023014434320022243002022" ,"4311231030130222114504110323", "11232243450001323026201203122332", "032244102010231270060211", "234120000143005203520130101323", "0341444044300031400500350012",
  // 328 - 334
  "10323340025214211046001203132233", "430142131057320060043300", "34210400850101441300021000", "0133143222104520200230260113233133", "400142030025066010220340", "20021334056222300210330002", "4411104070060274021100111221",
  // 335 - 341
  "2441201332020043022320140110233233", "144410022202400406303410", "3021330301012424313313201321", "2311404300240650003700320002123033", "014112443420201113413003", "40112300003313832511001012", "243202112103453220001220001232",
  // 342 - 348
  "401101230033123011401530021012203133", "423100140033320104603301", "1420424463030345101210021230", "231200422233211006400031000111132130", "400344100032352020030442", "40022143003521200283002222", "113400232530010302303400012233",
  // 349 - 355
  "3422310422000242220273000001102130", "033330343220520101134204", "42333141002130474038100013", "23220320520304201450021300112033", "221400444611300304402003", "00404304035000333036230023", "243202112103453220001220001232",
  // 356 - 362
  "31100344017404421210100002213033", "014402313740300413302200", "1013124202015334064020101020", "1310034213200411531010440002123032", "300434420253960020010020", "1234033184121200253001210032", "434131030022504800460110021321",
  // 363 - 369
  "4430101210050452024201320012303233", "001434300530520474020100", "00010203084006300420022002101220223032", "13104321212202230034152101032331", "023411100230750326310001", "1330024124420033310010520220", "033200340320200501108502002130",
  // 370 - 376
  "10034324063131103023300302103133", "124213302112004202210255", "242200311200012104804532011331", "10034324063131103023300302103133", "002033030560066001430010", "0123124237300242112330011321", "434404106004000221000472001020",
  // 377 - 383
  "12411034244420020211310300132331", "032432204220240033240131", "2112204302740001055400322133", "3024024202351103252000321113213033", "042032333200055410350220", "0144232022006006112504201333", "234103435302501521000054021030",
  // 384 - 390
  "40032134001430100154640202101230", "240210442003241002116003", "1330140057100540420301100113", "21022034045121200531100310213133", "203311430200113423653001", "44413103300420213005353031", "110012442410011003535004010311",
  // 391 - 397
  "03221041354026510112200102112230", "011340201140264000640012", "02223321322022441320330013", "0143413233400032202500430110122030", "003032040110057330151300", "4100321420430330001242020221", "243111103403244300320112102233",
  // 398 - 404
  "03221041354026510112200102112230", "011340201140264000640012", "1022033400104024022085000103132131", "03124131520006711030100201112023", "444213024003501602414210", "1340224463140024025210000013", "003012430140033302513025012022",
  // 405 - 411
  "12044143841255000011002200223233", "303401040366220004301200", "2310134026530210730300100102", "22320321165010004430420202303233", "442023413003022410340045", "40043411002275004303310210", "41021210107443000252031002112031",
  // 412 - 418
  "04120134110024315930110001132131", "124421404323300602110021", "10341412024285024303001010", "11034442024152003004301300031123", "033300242220540103305401", "3104022323441400420012000222", "231321339304201405400032001323",
  // 419 - 425
  "0203213432000220344145010010223133", "142220446501611603101001", "2102224303100130721510442030", "21241033114421040640021002112331", "110324401540420010020053", "2230430125440114003301200211", "224144011310400540051140010313",
  // 426 - 432
  "23141001510335020640100002111323", "240004118603063011000210", "24012340400433301520003211", "02404214251000360031320201223033", "124314347302400120035105", "40021410003418403301001211", "03124232133074120042310100102030",
  // 433 - 439
  "13341020033155000274012002223133", "224003343005005615100102", "412214432011500453022013001332", "22231020165121150012033101113233", "340442004203630050030310", "0044331304802001620141000213", "134014014620004522021010012123",
  // 440 - 446
  "43303314103202462002410302132331", "120401420671010024205013", "334024045411002641032100132130", "1301203105511340031101310210213033", "412243000057004500210410", "2303112046314520200202000120", "324112031240303541431000000313",
  // 447 - 453
  "33103441500601751200201213213033", "000431420110350010143045", "110413444400840002204002102233", "00034123052031101042222202122332", "313404424038320243002000", "3204233052161200332402200331", "400333410026211020260053031230",
  // 454 - 460
  "21044311003225003000453300022030", "322441004114340210000350", "340323216303851001220100102022", "44201331300603104102213403122123", "340312322300410033414222", "11143230123513000133032203", "403410130040200303654300032331",
  // 461 - 467
  "23410224320150462200100300103133", "434010130011006503540341", "3304430210120200501366100331", "2000230306400560131003300120223032", "321410424114140002651010", "03002130343002100471044022", "343101215502300311200163011231",
  // 468 - 474
  "4010122300320075251003300213233233", "202400420155420300103022", "142340104502610300330011012333", "01431142014010463521300100021230", "020321443100143023516002", "03233200222034316313001020", "042341012400820320420120001031",
  // 475 - 481
  "2102124225510130510210420212213033", "442324302001700520040262", "001421340420550014640100011321", "3024234300362104420140110103112232", "314100040065306601101100", "41110344302410004530400421", "0102314432001630221130051122",
  // 482 - 488
  "234420324102500902021310011321233233", "300044400033047030060030", "204033240045001120265600012123", "32033024033064000233210200021121", "123442302213120320350114", "4441032460055049112001001322", "214413412341000350151022132333",
  // 489 - 495
  "3223113355350032122400100312202233", "321301111352231310004510", "224110145321104100332202013033", "1132103313200057001245200002101333", "200403420660120074000042", "2211242355011223330401001223", "1243400464333034002211000023",
  // 496 - 502
  "244201232004401634000420001022303233", "314324200013001341050422", "01333034235020130354120021", "21134022200141350033055112223033", "121311334444000127200220101112", "43033130002336300010035633", "0302334028500100410300260122",
  // 503 - 509
  "42401304203200028302440000021220", "132234000021332585040100", "43310301601622000440233003", "0142311134500032220005500113213033", "413413012033620510223210", "02243143760030030034002200", "3341241442055039020010020213",
  // 510 - 516
  "0134113357104400005300130113212333", "003422230140010246104203", "3332102402104303048501001222", "32123440600713720100003112233233", "320213111141330001323720", "00224313043012535012101313", "212233044214341202102400001230",
  // 517 - 523
  "0211303420201850000233030002112331", "420244247007124050050001", "22312404462020272302100013", "4422141260036401220330020321303233", "442124204000046240050113", "00221444042013314103400111", "04433021450000210213045312212333",
  // 524 - 530
  "3442112020053032125301210013233133", "210343200563143040010024", "401103220002231129501013032122", "02330430650030016900010011132133", "340312113101322013104620", "22014214550233200021240101", "2431140387002035000121000111",
  // 531 - 537
  "2332144232118006210200200010212330", "134144243600402500015007", "2042341302354047210000121333", "44044221200462002023122203303233", "440431401002620000560044", "34204113110301561054000100010313", "11041442320152003500402300031130",
  // 538 - 544
  "02314320421001840010035200021233", "024032010450007340033200", "0041433001201069203500010113", "4313003480074300003001030013223133", "230021420013023015824002", "423310431002724X00330010132123", "111333324201312445311002032232",
  // 545 - 551
  "3334013020155302213002220211203133", "320014431123073042040021", "2443211431016025531410020323", "30432104025510220045130002122031", "113200422351025200304002", "2014114404761002075010000313", "024011436410005401300054002123",
  // 552 - 558
  "0111314321300360102340120210122132", "231014334223022220035510", "104403320353000104305412202231", "2312424032345112103100230212223233", "230142343137571010120100", "1032020406521253010023000131", "14112201340346201231100001032123",
  // 559 - 565
  "20133231012310021057154001032333", "122431021640210343132000", "230004211521040043000321011133", "42103111204205502032023003111333", "221421025444210216301000", "22000134253206200140110220", "32431123102150122145002203132333",
  // 566 - 572
  "34211303330024017403023000112032", "122431021640210343132000", "2200330465020360132013000122", "02412340661000411243001200101233", "431004310023064213000055", "400212430043146063110021031132", "21244104213155032002510003112031",
  // 573 - 579
  "20431311033330021520016302103032", "202310040750332100213100", "2004244101544200130020230311", "11144012325525000011250000303233", "241420438701730300130010", "413124045048004402002100102131", "03114223211034213021123110202230",
  // 580 - 586
  "30340342026800013620003102103032", "302414440255540050052001", "2343030051036014034001301020", "03230042012034300970002102223233", "133120333001128701121320", "0234003236601200040022130122", "03442043540030070011500213212332",
  // 587 - 593
  "2030143301550462200201320320233233", "341024207302024230050310", "320424145015400057003000011030", "44212012500321480310034013213133", "141144235005462020013221", "1441440152022043100234101323", "002044020230044150040240022031",
  // 594 - 600
  "30003311057104200035003302122133", "011130043540042003203600", "3402000495031010021057000021", "1324411102009503200200530010203032", "432210043023212504111200", "304134040043104140055200021020", "12131143576501001400101002132333",
  // 601 - 607
  "43330411303471043300101310122132", "411003240053065323000202", "223044142212026830011200121323", "03112440022007500200005700012133", "243244045201730510014100", "403224010046116713001000122123", "400331430054532000130034102023",
  // 608 - 614
  "12103044142001330450100503112230", "040210212600020004320352", "3104422331255200103112110322", "34221412440164222002200310202333", "331430024314120102313210", "3044024000113004564000520322", "11443342354210001046400202213033",
  // 615 - 621
  "04342340950001024102004100102233", "441102304004052045300100", "21421230215800120560021103202331", "31014014200122000085440300101222", "202104440345034123002002", "2300303430260540055010010323", "00410413054010121400350012203133",
  // 622 - 628
  "202410230330130000334425010311212333", "142230003402142102550100", "13104440213203434003003300032023", "0111432024500670401101000213202232", "400004120051042025001422", "0244143001208007120003330013", "121420436413200203102034011322",
  // 629 - 635
  "23332001410202530531112000122332", "031401434400130144005013", "34304203300402530021631000032031", "02244323663000015003242001223033", "023411414520220416301000", "032212344210544110004400011133", "200440140133630000531300103033",
  // 636 - 642
  "2143032211257025011001410002103033", "222403145411660152000001", "234001341313004425100003033133", "23141210332200016931001211213133", "142230003402142102550100", "144232117205302110421200032031", "343132142202100453143003001013213133",
  // 643 - 649
  "131244030231670050044100011030", "224404302112200440000353", "00231441025052005600001212213233", "0242330012102064500402000002132131"];

  intro();

  function intro() {

    firstDay = new Date("01/16/2023"); // 01/16/2023
    today = new Date();
    msPerDay = 1000 * 60 * 60 * 24;
    utc1 = Date.UTC(firstDay.getFullYear(), firstDay.getMonth(), firstDay.getDate());
    utc2 = Date.UTC(today.getFullYear(), today.getMonth(), today.getDate());
    index = (Math.abs(utc2 - utc1) / msPerDay);
    console.log(index);
    document.getElementById("version_info").innerText = "cardinal #" + index.toString() + " — v1.4.5";

    //index = 646; // COMMENT ME!!!!!!!!!!!!!!

    gridFill = false;

    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      colorMode = "dark";
    } else {
      colorMode = "light";
    }

    // load previous puzzle number. if first time visiting, set it to today
    storedPuzzleIndex = Number(window.localStorage.getItem("puzzleIndex"));
    if (!storedPuzzleIndex) {
      firstTime = true;
      window.localStorage.setItem("puzzleIndex", index.toString());
    }

    palette = window.localStorage.getItem("userPalette");
    if (!palette) {
      palette = "default";
      window.localStorage.setItem("userPalette", "default");
    }

    cm = window.localStorage.getItem("userColorMode");
    if (!cm) {
      window.localStorage.setItem("userColorMode", colorMode);
    } else {
      colorMode = cm;
    }

    gps = window.localStorage.getItem("gamesPlayed");
    if (!gps) {
      window.localStorage.setItem("gamesPlayed", "0");
    }

    wp = window.localStorage.getItem("gamesWon");
    if (!wp) {
      window.localStorage.setItem("gamesWon", "0");
    }

    at = window.localStorage.getItem("averageTime");
    if (!at || at === "00:00") {
      window.localStorage.setItem("averageTime", "0");
    }

    scores = window.localStorage.getItem("allScores");
    if (!scores) {
      window.localStorage.setItem("allScores", JSON.stringify([0, 0, 0, 0, 0]));
    }

    // if today is a new day
    if (storedPuzzleIndex != index) {
      todayWon = 0;
      window.localStorage.setItem("todayWon", "0");
      window.localStorage.setItem("puzzleIndex", index.toString());
      window.localStorage.setItem("gridProgress", JSON.stringify(grid));
      window.localStorage.setItem("timeSpent", "0");
    } // else today has already been opened
    else {
      todayWon = Number(window.localStorage.getItem("todayWon"));
      timeSpent = Number(window.localStorage.getItem("timeSpent"));
      gridFill = true;
      if (!todayWon) {
        window.localStorage.setItem("todayWon", "0");
      }
      if (!timeSpent) {
        window.localStorage.setItem("timeSpent", "0");
      }
    }

    windowListeners();
    colorPickerListeners();
    dragListeners();
    createSquares(true);
    choosePalette(palette);
    gameButtons(true);
    menuButtons(true);

    if (colorMode == "dark") {
      document.getElementById("dark_mode_checker").checked = true;
      switchColorMode();
    }

    if (firstTime) {
      settingsMenu(1);
    } else if (todayWon == 1) {
      gameSetup();
    } else {
      startPrompt();
    }
  }

  function gameSetup() {

    grid = Array.from(Array(5), () => new Array(5).fill(0));
    cors = [];
    compassNESW = [];
    blanks = [];

    gameWon = false;
    practice = false;

    todaysPuzzle = puzzles[index];

    activeGame = true;
    createSquares(false);
    puzzleSpecs(todaysPuzzle);
    fillGrid();
    setCompasses(false);
    setTimer(false);
    clearInterval(practiceInterval);
    clearInterval(timerInterval);
    timer.reset();
    window.localStorage.setItem("gridProgress", JSON.stringify(grid));

    ts = Number(window.localStorage.getItem("timeSpent"));
    if (ts == 0) {
      gpn = Number(window.localStorage.getItem("gamesPlayed"));
      window.localStorage.setItem("gamesPlayed", (gpn+1).toString());
    }

    todayWon = Number(window.localStorage.getItem("todayWon"));
    if (todayWon == 1) {
      timeText(ts);
      gameWon = true;
      gameWonCleanup();
    } else {
      timer.start();
      timerInterval = setInterval(() => {
        tmp = timer.getTime();
        t = tmp + (ts * 1000);
        window.localStorage.setItem("timeSpent", (t / 1000).toString());
        timeText((t / 1000));
      }, 100);
    }
  }

  function practiceSetup() {

    grid = Array.from(Array(5), () => new Array(5).fill(0));
    cors = [];
    compassNESW = [];
    blanks = [];

    gameWon = false;
    practice = true;
    activeGame = true;

    clearInterval(practiceInterval);
    clearInterval(timerInterval);
    timer.reset();

    randCompasses();
    randPuzzle();
    compassNESW = compassCheck();

    createSquares(false);
    setCompasses(false);
    setTimer(false);
    resetGrid();

    timer.start();
    practiceInterval = setInterval(() => {
      t = timer.getTime();
      timeText((t / 1000));
    }, 100);
  }

  function puzzleSpecs(puzzleString) {
    tmpArr = [];
    for (let i = 0; i < puzzleString.length; i++) {
      tmpArr.push(puzzleString[i]);
      if (i < 8 && i % 2 == 1) {
        cors.push(tmpArr);
        tmpArr = [];
      }
      if (i >= 8 && i < 24 && i % 4 == 3) {
        compassNESW.push(tmpArr);
        tmpArr = [];
      }
      if (i >= 24 && i % 2 == 1) {
        blanks.push(tmpArr);
        tmpArr = [];
      }
    }
  }

  function setCompasses(initial) {

    if (cors.length > 0) {
      for (let i = 0; i < 4; i++) {

        if (!initial) {

          if (document.getElementById("compass0" + (i+1).toString())) {
            document.getElementById("compass0" + (i+1).toString()).remove();
          }
          if (document.getElementById("compass1" + (i+1).toString())) {
            document.getElementById("compass1" + (i+1).toString()).remove();
          }
          if (document.getElementById("compass0" + (i+1).toString() + "N")) {
            document.getElementById("compass0" + (i+1).toString() + "N").remove();
          }
          if (document.getElementById("compass0" + (i+1).toString() + "E")) {
            document.getElementById("compass0" + (i+1).toString() + "E").remove();
          }
          if (document.getElementById("compass0" + (i+1).toString() + "S")) {
            document.getElementById("compass0" + (i+1).toString() + "S").remove();
          }
          if (document.getElementById("compass0" + (i+1).toString() + "W")) {
            document.getElementById("compass0" + (i+1).toString() + "W").remove();
          }
        }

        xin = cors[i][0];
        yin = cors[i][1];
        sqNum = +xin + (5 * +yin) + 1;

        sq = document.getElementById(sqNum.toString());

        sq.style.backgroundColor = style.getPropertyValue('--color' + (i + 1).toString());
        sq.style.border = "2px solid " + style.getPropertyValue('--color' + (i + 1).toString());
        grid[xin][yin] = i + 1;

        sqRect = sq.getBoundingClientRect();
        xCenter = (sqRect.left + sqRect.right) / 2;
        yCenter = (sqRect.top + sqRect.bottom) / 2;
        xOffset = sqRect.width / 3.5;
        yOffset = sqRect.height / 3.5;

        drawLine(sqRect.left + xOffset, sqRect.top + yOffset, sqRect.right - xOffset, sqRect.bottom - yOffset, "compass0" + (i+1).toString());
        drawLine(sqRect.left + xOffset, sqRect.bottom - yOffset, sqRect.right - xOffset, sqRect.top + yOffset, "compass1" + (i+1).toString());

        for (let j = 0; j < 4; j++) {
          coordinate = compassNESW[i][j];
          blank = false;
          for (let x = 0; x < blanks.length; x++) {
            if (blanks[x][0] == i && blanks[x][1] == j) {
              blank = true;
            }
          }
          if (!blank) {
            if (j == 0) {
              drawCoordinate(xCenter, yCenter - yOffset, coordinate.toString(), "compass0" + (i+1).toString() + "N");
            } else if (j == 1) {
              drawCoordinate(xCenter + xOffset, yCenter, coordinate.toString(), "compass0" + (i+1).toString() + "E");
            } else if (j == 2) {
              drawCoordinate(xCenter, yCenter + yOffset, coordinate.toString(), "compass0" + (i+1).toString() + "S");
            } else if (j == 3) {
              drawCoordinate(xCenter - xOffset, yCenter, coordinate.toString(), "compass0" + (i+1).toString() + "W");
            }
          }
        }
      }
    }
  }

  function drawLine(X1, Y1, X2, Y2, id, parent) {

    x1 = X1, y1 = Y1, x2 = X2, y2 = Y2;
    if (X1 > X2) { x1 = X2; y1 = Y2; x2 = X1; y2 = Y1; }
    dx = x1 - x2;
    dy = y1 - y2;
    d = Math.sqrt(dx * dx + dy * dy);
    a = Math.atan(dy / dx);

    line = document.createElement("span");
    line.classList.add("compass_line");
    line.id = id;
    line.style.top = `${y1}px`;
    line.style.left = `${x1}px`;
    line.style.width = `${d}px`;
    line.style.transform = `translate(-${d/2}px,0) rotate(${a}rad) translate(${d/2}px,0)`;
    line.style.pointerEvents = "none";
    if (parent === undefined) {
      gameBoard.appendChild(line);
    } else {
      line.style.borderTop = "1px solid black";
      parent.appendChild(line);
    }

  }

  function drawCoordinate(x, y, txt, id, parent) {

    num = document.createElement("p");
    num.classList.add("coordinate_num");
    num.id = id;
    num.innerText = txt;
    num.style.left = `${x}px`;
    num.style.top = `${y}px`;
    num.style.pointerEvents = "none";
    if (parent === undefined) {
      gameBoard.appendChild(num);
    } else {
      num.style.fontSize = "0.75rem";
      parent.appendChild(num);
    }

  }

  function createSquares(initial) {

    if (!initial) {
      for (let x = 0; x < 25; x++) {
        if (document.getElementById((x + 1).toString())) {
          document.getElementById((x + 1).toString()).remove();
        }
      }
    }

    w = (gameBoard.offsetWidth - 40) / 5;
    h = (gameBoard.offsetHeight - 40) / 5;
    size = 0;
    if (w >= h) {
      size = h;
    } else {
      size = w;
    }

    for (let i = 0; i < 25; i++) {
      let square = document.createElement("div");
      square.classList.add("button", "square");
      square.id = (i + 1).toString();
      square.style.backgroundColor = "white";
      square.style.width = `${size}px`;
      square.style.height = `${size}px`;
      ['pointerdown', 'pointermove', 'pointerup'].forEach( event =>
        square.addEventListener(event, setColor));
      gameBoard.appendChild(square);
      if (gameWon && !initial) {
        square.style.borderRadius = "50%";
      }
    }

    fillGrid();
  }

  function gameButtons(initial) {

    if (!initial) {
      document.getElementById("reset_button").remove();
      document.getElementById("highlight_button").remove();
    }

    cp05Rect = document.getElementById("cp05").getBoundingClientRect();
    cp06Rect = document.getElementById("cp06").getBoundingClientRect();
    centerx05 = (cp05Rect.left + cp05Rect.right) / 2;
    centery05 = (cp05Rect.top + cp05Rect.bottom) / 2;
    centerx06 = (cp06Rect.left + cp06Rect.right) / 2;
    centery06 = (cp06Rect.top + cp06Rect.bottom) / 2;

    resetImg = document.createElement("img");
    resetImg.src = "icons/reset_light.png";
    if (colorMode == "dark") { resetImg.src = "icons/reset_dark.png"; }
    resetImg.id = "reset_button";
    document.getElementById("cp05").addEventListener("click", resetGrid);
    resetImg.classList.add("game_button");
    resetImg.style.top = `${centery05}px`;
    resetImg.style.left = `${centerx05}px`;
    resetImg.style.transform = "translate(-50%, -50%)";
    resetImg.classList.add("disable_select");
    resetImg.style.pointerEvents = "none";

    highlightImg = document.createElement("img");
    highlightImg.src = "icons/highlight_light.png";
    if (colorMode == "dark") { highlightImg.src = "icons/highlight_dark.png"; }
    highlightImg.id = "highlight_button";
    document.getElementById("cp06").addEventListener("click", highlight);
    highlightImg.classList.add("game_button");
    highlightImg.style.top = `${centery06}px`;
    highlightImg.style.left = `${centerx06}px`;
    highlightImg.style.transform = "translate(-50%, -50%)";
    highlightImg.classList.add("disable_select");
    highlightImg.style.pointerEvents = "none";

    keyBoard.appendChild(resetImg);
    keyBoard.appendChild(highlightImg);
  }

  function menuButtons(initial) {
    if (!initial) {
      for (let i = 0; i < 4; i++) {
        document.getElementById("palette_button0" + (i+1).toString()).remove();
      }
      document.getElementById("settings_button").remove();
      document.getElementById("scores_button").remove();
    }

    menuContainer = document.getElementById("menu_buttons");
    menuRect = menuContainer.getBoundingClientRect();

    l = menuContainer.offsetLeft;
    r = (((2 * l) + (menuContainer.offsetWidth / 2)) / 2) + (menuContainer.offsetWidth / 2);
    t = menuContainer.offsetTop;
    b = menuContainer.offsetTop + menuContainer.offsetHeight;

    xCenter = (l + l + menuContainer.offsetWidth) / 2;
    yCenter = (t + b) / 2;

    for (let i = 0; i < 4; i++) {
      sq = document.createElement("button");
      sq.id = "palette_button0" + (i+1).toString();
      sq.addEventListener("click", paletteSelection);
      sq.classList.add("palette_square");
      sq.style.position = "absolute";
      if (i == 0) {
        sq.style.top = `${t}px`;
        sq.style.left = `${xCenter}px`;
      } else if (i == 1) {
        sq.style.top = `${t}px`;
        sq.style.left = `${r}px`;
      } else if (i == 2) {
        sq.style.top = `${yCenter}px`;
        sq.style.left = `${xCenter}px`;
      } else if (i == 3) {
        sq.style.top = `${yCenter}px`;
        sq.style.left = `${r}px`;
      }
      header.appendChild(sq);
    }

    settingsImg = document.createElement("img");
    settingsImg.src = "icons/settings_light.png";
    if (colorMode == "dark") { settingsImg.src = "icons/settings_dark.png"; }
    settingsImg.id = "settings_button";
    settingsImg.addEventListener("click", function() { settingsMenu(1) }, false);
    settingsImg.style.left = `${l}px`;
    settingsImg.style.top = `${t}px`;
    settingsImg.style.position = "absolute";
    settingsImg.style.height = "30px";
    settingsImg.style.cursor = "pointer";
    settingsImg.style.transform = "translate(-25%, 0)";
    settingsImg.style.webkitTapHighlightColor = "transparent";
    settingsImg.classList.add("disable_select");
    header.appendChild(settingsImg);

    scoresImg = document.createElement("img");
    scoresImg.src = "icons/scores_light.png";
    if (colorMode == "dark") { scoresImg.src = "icons/scores_dark.png"; }
    scoresImg.id = "scores_button";
    scoresImg.addEventListener("click", scoresMenu);
    scoresImg.style.left = `${l}px`;
    scoresImg.style.top = `${t}px`;
    scoresImg.style.position = "absolute";
    scoresImg.style.height = "30px";
    scoresImg.style.cursor = "pointer";
    scoresImg.style.transform = "translate(-150%, 0)";
    scoresImg.style.webkitTapHighlightColor = "transparent";
    scoresImg.classList.add("disable_select");
    header.appendChild(scoresImg);

    homeImg = document.createElement("img");
    homeImg.src = "icons/home_light.png";
    if (colorMode == "dark") { homeImg.src = "icons/home_dark.png"; }
    homeImg.id = "home_button";
    homeImg.addEventListener("click", (e) => { window.open("https://cornbread.games/home", "_blank").focus(); });
    homeImg.style.left = `${l}px`;
    homeImg.style.top = `${t}px`;
    homeImg.style.position = "absolute";
    homeImg.style.height = "30px";
    homeImg.style.cursor = "pointer";
    homeImg.style.transform = "translate(-275%, 0)";
    homeImg.style.webkitTapHighlightColor = "transparent";
    homeImg.classList.add("disable_select");
    header.appendChild(homeImg);
  }

  function setTimer(initial) {

    if (!initial) {
      if (document.getElementById("time")) {
        document.getElementById("time").remove();
      }
    }

    rect = keyBoard.getBoundingClientRect();
    time = document.createElement("span");
    time.id = "time";
    time.classList.add("timer");
    time.style.position = "absolute";
    time.style.top = `${rect.top}px`;
    time.style.transform = "translate(0, -25%)";
    if (colorMode == "light") {
      time.style.color = "black";
    } else {
      time.style.color = "white";
    }
    if (practice) {
      time.innerText = "practice time: 00:00";
    }
    keyBoard.appendChild(time);
    if (!practice) {
      timeText(Number(window.localStorage.getItem("timeSpent")));
    }

  }

  function timeText(seconds) {

    timeString = "";

    if (practice) {
      timeString = "practice time: ";
    }

    if (seconds < 3600) {
      timeString += new Date(seconds * 1000).toISOString().substring(14, 19);
    } else {
      timeString += new Date(seconds * 1000).toISOString().substring(11, 19);
    }

    document.getElementById("time").innerText = timeString;
  }

  function paletteSelection() {
    document.getElementById("palette_modal").classList.add("active");
    document.getElementById("overlay").classList.add("active");

    blurScreen();
  }

  function settingsMenu(menuNum) {

    document.getElementById("settings_modal").classList.add("active");
    document.getElementById("overlay").classList.add("active");

    if (firstTime && menuNum < 4) {
      document.getElementById("practice_container_02").classList.remove("active");
    } else {
      document.getElementById("practice_container_02").classList.add("active");
    }

    sqList = [];
    sqCoorList = [];
    squares = [];

    if (menuNum > 1) {
      document.getElementById("left_arrow").style.visibility = "visible";
    } else {
      document.getElementById("left_arrow").style.visibility = "hidden";
    }
    if (menuNum < 4) {
      document.getElementById("right_arrow").style.visibility = "visible";
    } else {
      document.getElementById("right_arrow").style.visibility = "hidden";
    }

    for (let i = 0; i < 4; i++) {
      if ((i+1) != menuNum) {
        document.getElementById("rules_container_0" + (i+1).toString()).classList.remove("active");
        document.getElementById("rules_dot_0" + (i+1).toString()).style.height = "10px";
        document.getElementById("rules_dot_0" + (i+1).toString()).style.width = "10px";
      } else {
        document.getElementById("rules_container_0" + (i+1).toString()).classList.add("active");
        document.getElementById("rules_dot_0" + (i+1).toString()).style.height = "20px";
        document.getElementById("rules_dot_0" + (i+1).toString()).style.width = "20px";
      }
    }
    if (menuNum == 1) {
      sqList = ["rb34"];
      sqCoorList = [[0,2,1,0]];
      squares = ["rb31", "rb32", "rb33", "rb35", "rb36", "rb37", "rb38", "rb39"];

    } else if (menuNum == 2) {
      sqList = ["rb04"];
      sqCoorList = [[0,2,1,0]];
      squares = ["rb01", "rb02", "rb03", "rb05", "rb06", "rb07", "rb08", "rb09"];

      if (colorMode == "light") {
        document.getElementById("rb07").style.animation = "rb07w 6s infinite steps(1, start)";
        document.getElementById("rb05").style.animation = "rb05w 6s infinite steps(1, start)";
        document.getElementById("rb06").style.animation = "rb06w 6s infinite steps(1, start)";
        document.getElementById("rb08").style.animation = "rb08w 6s infinite steps(1, start)";
      } else {
        document.getElementById("rb07").style.animation = "rb07b 6s infinite steps(1, start)";
        document.getElementById("rb05").style.animation = "rb05b 6s infinite steps(1, start)";
        document.getElementById("rb06").style.animation = "rb06b 6s infinite steps(1, start)";
        document.getElementById("rb08").style.animation = "rb08b 6s infinite steps(1, start)";
      }
      document.getElementById("rules_check_02").style.animation = "check01 6s infinite steps(1, start)";
    } else if (menuNum == 3) {
      sqList = ["rb11", "rb19"];
      sqCoorList = [[0,"x",2,0], [2,0,0,2]];
      squares = ["rb12", "rb13", "rb14", "rb15", "rb16", "rb17", "rb18"];

      if (colorMode == "light") {
        document.getElementById("rb18").style.animation = "rb18w 12s infinite steps(1, start)";
        document.getElementById("rb15").style.animation = "rb15w 12s infinite steps(1, start)";
        document.getElementById("rb16").style.animation = "rb16w 12s infinite steps(1, start)";
        document.getElementById("rb17").style.animation = "rb17w 12s infinite steps(1, start)";
        document.getElementById("rb14").style.animation = "rb14w 12s infinite steps(1, start)";
        document.getElementById("rb12").style.animation = "rb12w 12s infinite steps(1, start)";
        document.getElementById("rb13").style.animation = "rb13w 12s infinite steps(1, start)";
      } else {
        document.getElementById("rb18").style.animation = "rb18b 12s infinite steps(1, start)";
        document.getElementById("rb15").style.animation = "rb15b 12s infinite steps(1, start)";
        document.getElementById("rb16").style.animation = "rb16b 12s infinite steps(1, start)";
        document.getElementById("rb17").style.animation = "rb17b 12s infinite steps(1, start)";
        document.getElementById("rb14").style.animation = "rb14b 12s infinite steps(1, start)";
        document.getElementById("rb12").style.animation = "rb12b 12s infinite steps(1, start)";
        document.getElementById("rb13").style.animation = "rb13b 12s infinite steps(1, start)";
      }
      document.getElementById("rules_check_03").style.animation = "check02 12s infinite steps(1, start)";
      document.getElementById("rules_ex_03").style.animation = "ex02 12s infinite steps(1, start)";
    } else if (menuNum == 4) {
      sqList = ["rb21", "rb22", "rb23"];
      sqCoorList = [[0,0,2,0], [0,0,2,0], [0,0,2,0]];
      squares = ["rb24", "rb25", "rb26", "rb27", "rb28", "rb29"];

      if (colorMode == "light") {
        document.getElementById("rb24").style.animation = "rb24w 6s infinite steps(1, start)";
        document.getElementById("rb25").style.animation = "rb25w 6s infinite steps(1, start)";
        document.getElementById("rb27").style.animation = "rb27w 6s infinite steps(1, start)";
        document.getElementById("rb28").style.animation = "rb28w 6s infinite steps(1, start)";
        document.getElementById("rb26").style.animation = "rb26w 6s infinite steps(1, start)";
        document.getElementById("rb29").style.animation = "rb29w 6s infinite steps(1, start)";
      } else {
        document.getElementById("rb24").style.animation = "rb24b 6s infinite steps(1, start)";
        document.getElementById("rb25").style.animation = "rb25b 6s infinite steps(1, start)";
        document.getElementById("rb27").style.animation = "rb27b 6s infinite steps(1, start)";
        document.getElementById("rb28").style.animation = "rb28b 6s infinite steps(1, start)";
        document.getElementById("rb26").style.animation = "rb26b 6s infinite steps(1, start)";
        document.getElementById("rb29").style.animation = "rb29b 6s infinite steps(1, start)";
      }
      document.getElementById("rules_check_04").style.animation = "check03 6s infinite steps(1, start)";
    }

    for (let x = 0; x < squares.length; x++) {
      sq = document.getElementById(squares[x]);
      if (colorMode == "light") {
        sq.style.backgroundColor = "white";
        sq.style.border = "2px solid black";
      } else {
        sq.style.backgroundColor = style.getPropertyValue('--dark-mode-black');
        sq.style.border = "2px solid gray"
      }
    }

    for (let y = 0; y < sqList.length; y++) {

      if (document.getElementById("rc0" + (y+1).toString())) {
        document.getElementById("rc0" + (y+1).toString()).remove();
      }
      if (document.getElementById("rc1" + (y+1).toString())) {
        document.getElementById("rc1" + (y+1).toString()).remove();
      }
      if (document.getElementById("rn0" + (y+1).toString() + "N")) {
        document.getElementById("rn0" + (y+1).toString() + "N").remove();
      }
      if (document.getElementById("rn0" + (y+1).toString() + "E")) {
        document.getElementById("rn0" + (y+1).toString() + "E").remove();
      }
      if (document.getElementById("rn0" + (y+1).toString() + "S")) {
        document.getElementById("rn0" + (y+1).toString() + "S").remove();
      }
      if (document.getElementById("rn0" + (y+1).toString() + "W")) {
        document.getElementById("rn0" + (y+1).toString() + "W").remove();
      }
    }

    for (let i = 0; i < sqList.length; i++) {

      sq = document.getElementById(sqList[i]);
      sqRect = sq.getBoundingClientRect();
      l = sq.offsetLeft;
      r = sq.offsetLeft + sq.offsetWidth;
      t = sq.offsetTop;
      b = sq.offsetTop + sq.offsetHeight;
      xCenter = sq.offsetLeft + (sq.offsetWidth / 2);
      yCenter = sq.offsetTop + (sq.offsetHeight / 2);
      xOffset = sq.offsetWidth / 3.5;
      yOffset = sq.offsetHeight / 3.5;

      drawLine(l + xOffset, t + yOffset, r - xOffset, b - yOffset, "rc0" + (i+1).toString(), sq);
      drawLine(l + xOffset, b - yOffset, r - xOffset, t + yOffset, "rc1" + (i+1).toString(), sq);

      for (let j = 0; j < 4; j++) {

        coordinate = sqCoorList[i][j];
        if (coordinate !== "x") {
          if (j == 0) {
            drawCoordinate(xCenter, yCenter - yOffset, coordinate.toString(), "rn0" + (i+1).toString() + "N", sq);
          } else if (j == 1) {
            drawCoordinate(xCenter + xOffset, yCenter, coordinate.toString(), "rn0" + (i+1).toString() + "E", sq);
          } else if (j == 2) {
            drawCoordinate(xCenter, yCenter + yOffset, coordinate.toString(), "rn0" + (i+1).toString() + "S", sq);
          } else if (j == 3) {
            drawCoordinate(xCenter - xOffset, yCenter, coordinate.toString(), "rn0" + (i+1).toString() + "W", sq);
          }
        }
      }
    }

    mn = menuNum;
    blurScreen();
  }

  function scoresMenu() {
    document.getElementById("scores_modal").classList.add("active");
    document.getElementById("overlay").classList.add("active");

    gwn = Number(window.localStorage.getItem("gamesWon"));
    gpn = Number(window.localStorage.getItem("gamesPlayed"));
    atn = Number(window.localStorage.getItem("averageTime"));

    gp = document.getElementById("games_played_num");
    gp.innerText = window.localStorage.getItem("gamesPlayed");

    wp = document.getElementById("win_percentage_num");
    if (gpn == 0) {
      wp.innerText = 0;
    } else {
      wp.innerText = Math.floor((gwn / gpn) * 100).toString();
    }

    at = document.getElementById("average_time_num");
    if (atn < 3600) {
      at.innerText = new Date(atn * 1000).toISOString().substring(14, 19);
    } else {
      at.innerText = new Date(atn * 1000).toISOString().substring(11, 19);
    }

    scores = JSON.parse(window.localStorage.getItem("allScores"));
    max = Math.max(...scores);

    for (let i = 5; i > 0; i--) {
      s = scores[i-1];
      bar = document.getElementById("bb0" + i.toString());
      bar.innerText = s.toString();

      if (s == 0) {
          bar.style.width = "4%";
      } else {
          bar.style.width = `${4 + ((scores[i-1] / max) * 80)}%`;
      }
    }

    if (gameWon) {
      star = String.fromCodePoint("0x2605");
      timeNumber = Number(window.localStorage.getItem("timeSpent"));
      timeSpent = "";
      if (timeNumber < 3600) {
        timeSpent = new Date(timeNumber * 1000).toISOString().substring(14, 19);
      } else {
        timeSpent = new Date(timeNumber * 1000).toISOString().substring(11, 19);
      }
      stars = getScore(timeNumber);

      document.getElementById("clipboard_copy").innerText = "today's score: " + timeSpent + ", " + stars.toString() + star;
    }

    blurScreen();
  }

  function closeModal(clicked = "close") {

    if (firstTime) {
      document.getElementById("settings_modal").classList.remove("active");
      document.getElementById("overlay").classList.remove("active");
      firstTime = false;
      if (clicked != "practice") {
        startPrompt();
      }
    } else {
      if (!(clicked == "overlay" && document.getElementById("start_modal").classList.contains("active"))) {
        document.getElementById("palette_modal").classList.remove("active");
        document.getElementById("settings_modal").classList.remove("active");
        document.getElementById("scores_modal").classList.remove("active");
        document.getElementById("start_modal").classList.remove("active");
        document.getElementById("overlay").classList.remove("active");

        mn = 1;

        focusScreen();
      }
    }
  }

  function colorPickerListeners() {
    document.getElementById("cp01").addEventListener("click", function() { chooseColor(1) }, false);
    document.getElementById("cp02").addEventListener("click", function() { chooseColor(2) }, false);
    document.getElementById("cp03").addEventListener("click", function() { chooseColor(3) }, false);
    document.getElementById("cp04").addEventListener("click", function() { chooseColor(4) }, false);
  }

  function dragListeners() {
    document.addEventListener("pointerdown", beginColor);
    document.addEventListener("pointerup", endColor);
    document.addEventListener("pointerup", didWin);
  }

  function windowListeners() {
    window.addEventListener("resize", function() { createSquares(false) }, false);
    window.addEventListener("resize", function() { setCompasses(false) }, false);
    window.addEventListener("resize", function() { gameButtons(false) }, false);
    window.addEventListener("resize", function() { menuButtons(false) }, false);
    window.addEventListener("resize", function() { setTimer(false) }, false);
    window.addEventListener("blur", blurScreen);
    window.addEventListener("focus", focusScreen);

    document.getElementById("palette_close").addEventListener("click", closeModal);
    document.getElementById("settings_close").addEventListener("click", closeModal);
    document.getElementById("scores_close").addEventListener("click", closeModal);
    document.getElementById("overlay").addEventListener("click", function() { closeModal("overlay") }, false);
    document.getElementById("share_button").addEventListener("click", shareScore);
    document.getElementById("share_button").addEventListener("touchstart", shareScore);
    document.getElementById("start_button").addEventListener("click", gameSetup);
    document.getElementById("start_button").addEventListener("click", closeModal);
    document.getElementById("practice_button").addEventListener("click", practiceSetup);
    document.getElementById("practice_button").addEventListener("click", closeModal);
    document.getElementById("practice_button_02").addEventListener("click", practiceSetup);
    document.getElementById("practice_button_02").addEventListener("click", function() { closeModal("practice") }, false);

    document.getElementById("left_arrow").addEventListener("click", function() { settingsMenu((mn-1)) }, false);
    document.getElementById("right_arrow").addEventListener("click", function() { settingsMenu((mn + 1)) }, false);

    document.getElementById("default").addEventListener("click", function() { choosePalette("default"); }, false);
    document.getElementById("colorblind").addEventListener("click", function() { choosePalette("colorblind"); }, false);
    document.getElementById("neon").addEventListener("click", function() { choosePalette("neon"); }, false);
    document.getElementById("tape").addEventListener("click", function() { choosePalette("tape"); }, false);
    document.getElementById("vintage").addEventListener("click", function() { choosePalette("vintage"); }, false);
    document.getElementById("sunset").addEventListener("click", function() { choosePalette("sunset"); }, false);
    document.getElementById("grayscale").addEventListener("click", function() { choosePalette("grayscale"); }, false);

    document.getElementById("dark_mode_switch").addEventListener("click", switchColorMode);
  }

  function choosePalette(theme) {
    themer = document.getElementById("themer");
    themer.className = "";
    themer.classList.add(theme);

    palettes = document.getElementsByClassName("palette");
    for (let i = 0; i < palettes.length; i++) {
      p = palettes[i];
      if (palettes[i].id == theme) {
        palettes[i].style.backgroundColor = "gainsboro";
      } else {
        if (colorMode == "light") {
          palettes[i].style.backgroundColor = "white";
          palettes[i].style.borderTop = "1px solid black";
        } else {
          palettes[i].style.backgroundColor = style.getPropertyValue('--dark-mode-black');
          palettes[i].style.borderTop = "1px solid gray";
        }
      }
    }

    fillGrid();

    window.localStorage.setItem("userPalette", theme);
  }

  function switchColorMode() {

    if (document.getElementById("dark_mode_checker").checked) {
      colorMode = "dark";
    } else {
      colorMode = "light";
    }
    window.localStorage.setItem("userColorMode", colorMode);

    if (colorMode == "light") {
      // main game
      document.getElementById("container").style.backgroundColor = "white";
      document.getElementById("header").style.borderBottom = "1px solid black";
      document.getElementById("title").style.color = "black";
      document.getElementById("cp05").style.backgroundColor = "white";
      document.getElementById("cp06").style.backgroundColor = "white";
      document.getElementById("reset_button").src = "icons/reset_light.png";
      document.getElementById("highlight_button").src = "icons/highlight_light.png";
      document.getElementById("settings_button").src = "icons/settings_light.png";
      document.getElementById("scores_button").src = "icons/scores_light.png";
      document.getElementById("home_button").src = "icons/home_light.png";
      if (document.getElementById("time")) {
        document.getElementById("time").style.color = "black";
      }

      // palette modal
      document.getElementById("palette_modal").style.backgroundColor = "white";
      document.getElementById("palette_modal").style.border = "2px solid black";
      document.getElementById("palette_close").style.color = "black";
      document.getElementById("dark_mode_container").style.backgroundColor = "white";
      document.getElementById("dark_mode_name").style.color = "black";

      // settings modal
      document.getElementById("settings_modal").style.backgroundColor = "white";
      document.getElementById("settings_modal").style.border = "2px solid black";
      document.getElementById("settings_close").style.color = "black";

      document.getElementById("tutorial_title").style.color = "black";

      document.getElementById("rules_container_01").style.backgroundColor = "white";
      document.getElementById("rules_container_01").style.borderTop = "1px solid black";
      document.getElementById("rules_text_01").style.color = "black";
      document.getElementById("rules_check_01").style.color = "white";

      document.getElementById("rules_container_02").style.backgroundColor = "white";
      document.getElementById("rules_container_02").style.borderTop = "1px solid black";
      document.getElementById("rules_text_02").style.color = "black";

      document.getElementById("rules_container_03").style.backgroundColor = "white";
      document.getElementById("rules_container_03").style.borderTop = "1px solid black";
      document.getElementById("rules_text_03").style.color = "black";

      document.getElementById("rules_container_04").style.backgroundColor = "white";
      document.getElementById("rules_container_04").style.borderTop = "1px solid black";
      document.getElementById("rules_text_04").style.color = "black";

      document.getElementById("check_container").style.color = "white";
      document.getElementById("rules_bottom_row").style.backgroundColor = "white";
      document.getElementById("rules_dots").style.backgroundColor = "white";
      document.getElementById("rules_dot_01").style.backgroundColor = "black";
      document.getElementById("rules_dot_02").style.backgroundColor = "black";
      document.getElementById("rules_dot_03").style.backgroundColor = "black";
      document.getElementById("rules_dot_04").style.backgroundColor = "black";
      document.getElementById("left_arrow").src = "icons/left_light.png";
      document.getElementById("right_arrow").src = "icons/right_light.png";

      document.getElementById("practice_container_02").style.backgroundColor = "white";
      document.getElementById("practice_container_02").style.borderTop = "1px solid black";
      document.getElementById("practice_intro_02").style.color = "black";

      // scores modal
      document.getElementById("scores_modal").style.backgroundColor = "white";
      document.getElementById("scores_modal").style.border = "2px solid black";
      document.getElementById("scores_close").style.color = "black";
      document.getElementById("stats_container").style.color = "black";
      document.getElementById("stats_container").style.backgroundColor = "white";
      document.getElementById("stats_container").style.borderTop = "1px solid black";
      document.getElementById("share_container").style.backgroundColor = "white";
      document.getElementById("share_container").style.borderTop = "1px solid black";
      document.getElementById("clipboard_copy").style.color = "black";
      document.getElementById("my_info").style.backgroundColor = "white";
      document.getElementById("my_info").style.borderTop = "1px solid black";
      document.getElementById("name").style.color = "black";
      document.getElementById("email").style.color = "black";
      document.getElementById("graph_container").style.backgroundColor = "white";
      document.getElementById("bl01").style.color = "black";
      document.getElementById("bl02").style.color = "black";
      document.getElementById("bl03").style.color = "black";
      document.getElementById("bl04").style.color = "black";
      document.getElementById("bl05").style.color = "black";
      document.getElementById("version_info").style.backgroundColor = "white";
      document.getElementById("version_info").style.color = "black";

      // start modal
      document.getElementById("start_modal").style.border = "2px solid black";
      document.getElementById("start_modal").style.backgroundColor = "white";
      document.getElementById("start_container").style.backgroundColor = "white";
      document.getElementById("cardinal_intro").style.color = "black";
      document.getElementById("practice_container").style.backgroundColor = "white";
      document.getElementById("practice_container").style.borderTop = "1px solid black";
      document.getElementById("practice_intro").style.color = "black";

      document.getElementById("warning01").style.color = "black";
      document.getElementById("warning02").style.color = "black";

    } else {
      // main game
      document.getElementById("container").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("header").style.borderBottom = "1px solid gray";
      document.getElementById("title").style.color = "white";
      document.getElementById("cp05").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("cp06").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("reset_button").src = "icons/reset_dark.png";
      document.getElementById("highlight_button").src = "icons/highlight_dark.png";
      document.getElementById("settings_button").src = "icons/settings_dark.png";
      document.getElementById("scores_button").src = "icons/scores_dark.png";
      document.getElementById("home_button").src = "icons/home_dark.png";
      if (document.getElementById("time")) {
        document.getElementById("time").style.color = "white";
      }

      // palette modal
      document.getElementById("palette_modal").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("palette_modal").style.border = "2px solid gray";
      document.getElementById("palette_close").style.color = "gray";
      document.getElementById("dark_mode_container").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("dark_mode_name").style.color = "white";

      // settings modal
      document.getElementById("settings_modal").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("settings_modal").style.border = "2px solid gray";
      document.getElementById("settings_close").style.color = "gray";

      document.getElementById("tutorial_title").style.color = "white";

      document.getElementById("rules_container_01").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("rules_container_01").style.borderTop = "1px solid gray";
      document.getElementById("rules_text_01").style.color = "white";
      document.getElementById("rules_check_01").style.color = style.getPropertyValue('--dark-mode-black');

      document.getElementById("rules_container_02").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("rules_container_02").style.borderTop = "1px solid gray";
      document.getElementById("rules_text_02").style.color = "white";

      document.getElementById("rules_container_03").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("rules_container_03").style.borderTop = "1px solid gray";
      document.getElementById("rules_text_03").style.color = "white";

      document.getElementById("rules_container_04").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("rules_container_04").style.borderTop = "1px solid gray";
      document.getElementById("rules_text_04").style.color = "white";

      document.getElementById("check_container").style.color = style.getPropertyValue('--dark-mode-black');
      document.getElementById("rules_bottom_row").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("rules_dots").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("rules_dot_01").style.backgroundColor = "white";
      document.getElementById("rules_dot_02").style.backgroundColor = "white";
      document.getElementById("rules_dot_03").style.backgroundColor = "white";
      document.getElementById("rules_dot_04").style.backgroundColor = "white";
      document.getElementById("left_arrow").src = "icons/left_dark.png";
      document.getElementById("right_arrow").src = "icons/right_dark.png";

      document.getElementById("practice_container_02").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("practice_container_02").style.borderTop = "1px solid gray";
      document.getElementById("practice_intro_02").style.color = "white";

      // scores modal
      document.getElementById("scores_modal").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("scores_modal").style.border = "2px solid gray";
      document.getElementById("scores_close").style.color = "gray";
      document.getElementById("stats_container").style.color = "white";
      document.getElementById("stats_container").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("stats_container").style.borderTop = "1px solid gray";
      document.getElementById("share_container").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("share_container").style.borderTop = "1px solid gray";
      document.getElementById("clipboard_copy").style.color = "white";
      document.getElementById("my_info").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("my_info").style.borderTop = "1px solid gray";
      document.getElementById("name").style.color = "white";
      document.getElementById("email").style.color = "white";
      document.getElementById("graph_container").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("bl01").style.color = "white";
      document.getElementById("bl02").style.color = "white";
      document.getElementById("bl03").style.color = "white";
      document.getElementById("bl04").style.color = "white";
      document.getElementById("bl05").style.color = "white";
      document.getElementById("version_info").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("version_info").style.color = "white";

      // start modal
      document.getElementById("start_modal").style.border = "2px solid gray";
      document.getElementById("start_modal").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("start_container").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("cardinal_intro").style.color = "white";
      document.getElementById("practice_container").style.backgroundColor = style.getPropertyValue('--dark-mode-black');
      document.getElementById("practice_container").style.borderTop = "1px solid gray";
      document.getElementById("practice_intro").style.color = "white";

      document.getElementById("warning01").style.color = "white";
      document.getElementById("warning02").style.color = "white";
    }

    choosePalette(window.localStorage.getItem("userPalette"));
    fillGrid();
    chooseColor(currentColor);
  }

  function blurScreen() {

    if (activeGame) {

      timer.stop();

      if (!gameWon) {
        for (let i = 0; i < 4; i++) {
          if (document.getElementById("compass0" + (i+1).toString())) {
            document.getElementById("compass0" + (i+1).toString()).remove();
          }
          if (document.getElementById("compass1" + (i+1).toString())) {
            document.getElementById("compass1" + (i+1).toString()).remove();
          }
          if (document.getElementById("compass0" + (i+1).toString() + "N")) {
            document.getElementById("compass0" + (i+1).toString() + "N").remove();
          }
          if (document.getElementById("compass0" + (i+1).toString() + "E")) {
            document.getElementById("compass0" + (i+1).toString() + "E").remove();
          }
          if (document.getElementById("compass0" + (i+1).toString() + "S")) {
            document.getElementById("compass0" + (i+1).toString() + "S").remove();
          }
          if (document.getElementById("compass0" + (i+1).toString() + "W")) {
            document.getElementById("compass0" + (i+1).toString() + "W").remove();
          }
        }

        for (let x = 0; x < 5; x++) {
          for (let y = 0; y < 5; y++) {
            sq = document.getElementById((x + (5 * y) + 1).toString());
            if (colorMode == "light") {
              sq.style.backgroundColor = "white";
              sq.style.border = "2px solid black";
            } else {
              sq.style.backgroundColor = style.getPropertyValue('--dark-mode-black');
              sq.style.border = "2px solid gray";
            }
          }
        }
      }
    }
  }

  function focusScreen() {

    if (activeGame) {
      if (!document.getElementById("start_modal").classList.contains("active")
      && !document.getElementById("palette_modal").classList.contains("active")
      && !document.getElementById("settings_modal").classList.contains("active")
      && !document.getElementById("scores_modal").classList.contains("active")) {

        if (!gameWon) {
          timer.start();
        }

        setCompasses(false);
        fillGrid();
      }
    }
  }

  function startPrompt() {

    document.getElementById("start_modal").classList.add("active");
    document.getElementById("overlay").classList.add("active");
    document.getElementById("cardinal_intro").innerText = "cardinal #" + index.toString();

    ts = Number(window.localStorage.getItem("timeSpent"));
    if (ts != 0) {
      document.getElementById("start_button").innerText = "continue";
    }

    blurScreen();
  }

  function beginColor() {

    if (activeGame) {
      drag = true;
      if (highlighted) {
        setCompasses(false);
        highlighted = false;
      }
    }

  }

  function endColor() {
    if (activeGame) {
      drag = false;
      for (let i = 0; i < 5; i++) {
        for (let j = 0; j < 5; j++) {
          clicked[i][j] = 0;
        }
      }
    }
  }

  function chooseColor(choice) {
    currentColor = choice;

    for (let i = 0; i < 4; i++) {
      cp = document.getElementById("cp0" + (i+1).toString());
      if (i == currentColor - 1) {
        if (colorMode == "light") {
          cp.style.border = "2px solid black";
        } else {
          cp.style.border = "2px solid white";
        }
      } else {
        if (colorMode == "light") {
          cp.style.border = "2px solid white";
        } else {
          cp.style.border = "2px solid " + style.getPropertyValue('--dark-mode-black');
        }
      }
    }
  }

  function setColor(event) {

    sq = event.target;
    if (sq.hasPointerCapture(event.pointerId)) { sq.releasePointerCapture(event.pointerId); }

    sqx = Math.floor((sq.id-1) % 5);
    sqy = Math.floor((sq.id-1) / 5);

    valid = true;
    for (let i = 0; i < 4; i++) {
      compassx = cors[i][0];
      compassy = cors[i][1];
      if (compassx == sqx && compassy == sqy) {
        valid = false;
        if (drag) {
          currentColor = grid[sqx][sqy];
          chooseColor(currentColor);
        }
      }
    }

    if (drag && clicked[sqx][sqy] == 0 && valid) {
      if (grid[sqx][sqy] != currentColor) {
        sq.style.backgroundColor = style.getPropertyValue('--color' + currentColor);
        sq.style.border = "2px solid " + style.getPropertyValue('--color' + currentColor);
        grid[sqx][sqy] = currentColor;
      } else {
        if (colorMode == "light") {
          sq.style.backgroundColor = "white";
          sq.style.border = "2px solid black";
        } else {
          sq.style.backgroundColor = style.getPropertyValue('--dark-mode-black');
          sq.style.border = "2px solid gray";
        }
        grid[sqx][sqy] = 0;
      }
      clicked[sqx][sqy] = 1;
    }
  }

  function resetGrid() {

    if (activeGame) {
      for (let i = 0; i < 5; i++) {
        for (let j = 0; j < 5; j++) {
          sq = document.getElementById((i + (5 * j) + 1).toString());
          valid = true;
          for (let c = 0; c < 4; c++) {
            if (i == cors[c][0] && j == cors[c][1]) {
              valid = false;
            }
          }
          if (valid) {
            grid[i][j] = 0;
            if (colorMode == "light") {
              sq.style.backgroundColor = "white";
              sq.style.border = "2px solid black";
            } else {
              sq.style.backgroundColor = style.getPropertyValue('--dark-mode-black');
              sq.style.border = "2px solid gray";
            }
          }
        }
      }
      setCompasses();
      if (!practice) {
        window.localStorage.setItem("gridProgress", JSON.stringify(grid));
      }
    }
  }

  function highlight() {

    if (activeGame) {
      highlighted = true;

      nesw = compassCheck();

      for (let i = 0; i < 4; i++) {
        for (let j = 0; j < 4; j++) {
          if (j == 0 && document.getElementById("compass0" + (i+1).toString() + "N")) {
            if (nesw[i][j] != compassNESW[i][j]) {
              document.getElementById("compass0" + (i+1).toString() + "N").style.color = "white";
            } else {
              document.getElementById("compass0" + (i+1).toString() + "N").style.color = "black";
            }
          }
          if (j == 1 && document.getElementById("compass0" + (i+1).toString() + "E")) {
            if (nesw[i][j] != compassNESW[i][j]) {
              document.getElementById("compass0" + (i+1).toString() + "E").style.color = "white";
            } else {
              document.getElementById("compass0" + (i+1).toString() + "E").style.color = "black";
            }
          }
          if (j == 2 && document.getElementById("compass0" + (i+1).toString() + "S")) {
            if (nesw[i][j] != compassNESW[i][j]) {
              document.getElementById("compass0" + (i+1).toString() + "S").style.color = "white";
            } else {
              document.getElementById("compass0" + (i+1).toString() + "S").style.color = "black";
            }
          }
          if (j == 3 && document.getElementById("compass0" + (i+1).toString() + "W")) {
            if (nesw[i][j] != compassNESW[i][j]) {
              document.getElementById("compass0" + (i+1).toString() + "W").style.color = "white";
            } else {
              document.getElementById("compass0" + (i+1).toString() + "W").style.color = "black";
            }
          }
        }
      }
    }
  }

  function didWin() {

    if (activeGame) {
      if (!practice) {
        window.localStorage.setItem("gridProgress", JSON.stringify(grid));
      }

      nesw = compassCheck();

      win = true;

      for (let c = 0; c < 4; c++) {
        for (let d = 0; d < 4; d++) {
          b = false;
          for (let e = 0; e < blanks.length; e++) {
            if (c == blanks[e][0] && d == blanks[e][1]) {
              b = true;
            }
          }
          if ((nesw[c][d] != compassNESW[c][d]) && !b) {
            win = false;
          }
        }
      }

      if (win) {
        if (noLoneSquares() && checkPaths()) {

          if (practice) {
            timer.stop();
            gameWon = true;
            gameWonCleanup();
          } else {
            gameWon = true;
            timer.stop();
            clearInterval(timerInterval);
            gameWonCleanup();
            gw = Number(window.localStorage.getItem("gamesWon")) + 1;
            window.localStorage.setItem("gamesWon", gw.toString());

            newT = Number(window.localStorage.getItem("timeSpent"));
            oldAvg = Number(window.localStorage.getItem("averageTime"));
            newAvg = oldAvg + ((newT - oldAvg) / gw);
            window.localStorage.setItem("averageTime", newAvg.toString());

            scores = JSON.parse(window.localStorage.getItem("allScores"));
            stars = getScore(newT);
            scores[stars-1] = scores[stars-1] + 1;
            window.localStorage.setItem("allScores", JSON.stringify(scores));
          }
        }
      }
    }
  }

  function fillGrid() {

    if (practice) {
      for (let x = 0; x < 5; x++) {
        for (let y = 0; y < 5; y++) {
          sq = document.getElementById((x + (5 * y) + 1).toString());
          if (grid[x][y] == 0) {
            if (colorMode == "light") {
              sq.style.backgroundColor = "white";
              sq.style.border = "2px solid black";
            } else {
              sq.style.backgroundColor = style.getPropertyValue('--dark-mode-black');
              sq.style.border = "2px solid gray"
            }
          } else {
            sq.style.backgroundColor = style.getPropertyValue('--color' + grid[x][y]);
            sq.style.border = "2px solid " + style.getPropertyValue('--color' + grid[x][y]);
          }
        }
      }
    } else {
      gridProgress = JSON.parse(window.localStorage.getItem("gridProgress"));
      for (let x = 0; x < 5; x++) {
        for (let y = 0; y < 5; y++) {
          grid[x][y] = gridProgress[x][y];
          sq = document.getElementById((x + (5 * y) + 1).toString());
          if (!gridProgress[x][y]) {
            if (colorMode == "light") {
              sq.style.backgroundColor = "white";
              sq.style.border = "2px solid black";
            } else {
              sq.style.backgroundColor = style.getPropertyValue('--dark-mode-black');
              sq.style.border = "2px solid gray"
            }
          } else {
            sq.style.backgroundColor = style.getPropertyValue('--color' + gridProgress[x][y]);
            sq.style.border = "2px solid " + style.getPropertyValue('--color' + gridProgress[x][y]);
          }
        }
      }
    }
  }

  function gameWonCleanup() {

    activeGame = false;

    if (!practice) {
      document.getElementById("share_container").classList.add("active");
      window.localStorage.setItem("todayWon", "1");
    }

    fillGrid();

    delay = 0.15;
    for (let x = 0; x < 5; x++) {
      for (let y = 0; y < 5; y++) {
        sqNum = x + (5 * y) + 1;
        sq = document.getElementById((sqNum).toString());
        sq.style.animation = `square_flip 1.5s ease-in ${(delay * x) + (delay * y)}s 1 forwards`;
        ['pointerdown', 'pointermove', 'pointerup'].forEach( event =>
          sq.removeEventListener(event, setColor));
      }
    }

    if (!practice) {
      setTimeout(scoresMenu, 2200);
    } else {
      setTimeout(startPrompt, 2200);
    }

  }

  function shareScore() {

    yc = String.fromCodePoint("0x1f7e1");
    rc = String.fromCodePoint("0x1f534");
    gc = String.fromCodePoint("0x1f7e2");
    bc = String.fromCodePoint("0x1f535");
    oc = String.fromCodePoint("0x1f7e0");
    pc = String.fromCodePoint("0x1f7e3");
    star = String.fromCodePoint("0x2605");
    blankStar = String.fromCodePoint("0x2606");
    clock = String.fromCodePoint("0x1f553");
    blackCircle = String.fromCodePoint("0x26AB");

    timeNumber = Number(window.localStorage.getItem("timeSpent"));
    timeSpent = "";
    if (timeNumber < 3600) {
      timeSpent = new Date(timeNumber * 1000).toISOString().substring(14, 19);
    } else {
      timeSpent = new Date(timeNumber * 1000).toISOString().substring(11, 19);
    }

    if (timeSpent === "07:06") {
      console.log("very cool");
      timeSpent = "06:66";
    }

    stars = getScore(timeNumber);

    scoreString = "";
    for (let i = 0; i < 5; i++) {
      if ((i + 1) <= stars) {
        scoreString = scoreString + star + " ";
      } else {
        scoreString = scoreString + blankStar + " ";
      }
    }

    shareString = `cardinal #${index.toString()} — ${timeSpent}
${scoreString}

https://cornbread.games`;

    hasTouchScreen = false;
    if ("maxTouchPoints" in navigator) {
      hasTouchScreen = navigator.maxTouchPoints > 0;
    } else if ("msMaxTouchPoints" in navigator) {
      hasTouchScreen = navigator.msMaxTouchPoints > 0;
    }

    if (navigator.share && hasTouchScreen) {
      navigator.share({
        text: shareString
      })
    } else if (navigator.clipboard) {
      navigator.clipboard.writeText(shareString);
      document.getElementById("clipboard_copy").innerText = "copied to clipboard";
    } else {
      document.getElementById("clipboard_copy").innerText = "error copying score";
    }
  }

  function getScore(t) {

    t01 = 60; // within 1 minute = 5 stars
    t02 = 150; // within 2.5 minutes = 4 stars
    t03 = 300; // within 5 minutes = 3 stars
    t04 = 600; // within 10 minutes = 2 stars, 10+ minutes = 1 star

    if (t <= t01) {
      stars = 5;
    } else if (t > t01 && t <= t02) {
      stars = 4;
    } else if (t > t02 && t <= t03) {
      stars = 3;
    } else if (t > t03 && t <= t04) {
      stars = 2;
    } else {
      stars = 1;
    }

    return stars;
  }

  function checkDirection(i, d) {
    if (d == "N" || d == "W") {
      return i > 0;
    }
    if (d == "E" || d == "S") {
      return i < 4;
    }
  }

  function noLoneSquares() {
    noLone = true;
    nor = eas = sou = wes = 0;

    for (let x = 0; x < 5; x++) {
      for (let y = 0; y < 5; y++) {
        color = grid[x][y];

        if (checkDirection(y, "N")) { nor = grid[x][y-1]; }
        if (checkDirection(x, "E")) { eas = grid[x+1][y]; }
        if (checkDirection(y, "S")) { sou = grid[x][y+1]; }
        if (checkDirection(x, "W")) { wes = grid[x-1][y]; }

        if (x == 0 && y == 0) {
          if (eas != color && sou != color) { noLone = false; }
        } else if (x == 4 && y == 0) {
          if (sou != color && wes != color) { noLone = false; }
        } else if (x == 4 && y == 4) {
          if (nor != color && wes != color) { noLone = false; }
        } else if (x == 0 && y == 4) {
          if (nor != color && eas != color) { noLone = false; }
        } else if (x == 0) {
          if (nor != color && eas != color && sou != color) { noLone = false; }
        } else if (y == 0) {
          if (eas != color && sou != color && wes != color) { noLone = false; }
        } else if (x == 4) {
          if (nor != color && sou != color && wes != color) { noLone = false; }
        } else if (y == 4) {
          if (nor != color && eas != color && wes != color) { noLone = false; }
        } else if (nor != color && eas != color && sou != color && wes != color) { noLone = false; }
      }
    }

    return noLone;
  }

  function checkPaths() {
    winPath = true;

    for (let i = 0; i < 4; i++) {
      for (let x = 0; x < 5; x++) {
        for (let y = 0; y < 5; y++) {
          compassX = +cors[i][0];
          compassY = +cors[i][1];
          if (grid[x][y] == grid[compassX][compassY] && !(x == compassX && y == compassY)) {
            if (!checkPath(x, y, compassX, compassY)) {
              winPath = false;
            }
          }
          if (grid[x][y] == 0) {
            winPath = false;
          }
        }
      }
    }
    return winPath;
  }

  function checkPath(x1, y1, x2, y2) {

    binaryGrid = Array.from(Array(5), () => new Array(5));
    goodPath = false;
    color = grid[x1][y1];
    if (color == 0) {
      return false;
    }

    for (let x = 0; x < 5; x++) {
      for (let y = 0; y < 5; y++) {
        if (grid[x][y] == color) {
          binaryGrid[x][y] = Math.abs(x2 - x) + (Math.abs(y2 - y) * 2) + 1;
        } else {
          binaryGrid[x][y] = 0;
        }
      }
    }

    checkCoordinates = [[x1, y1]];
    deadPath = false;

    while (!deadPath) {

      currentX = checkCoordinates[0][0];
      currentY = checkCoordinates[0][1];

      pathSpots = [];

      if (checkDirection(currentY, "N") && binaryGrid[currentX][currentY-1] > 0) {
        pathValue = binaryGrid[currentX][currentY-1];
        pathSpots.push([currentX, currentY-1, pathValue]);
      }
      if (checkDirection(currentX, "E") && binaryGrid[currentX+1][currentY] > 0) {
        pathValue = binaryGrid[currentX+1][currentY];
        pathSpots.push([currentX+1, currentY, pathValue]);
      }
      if (checkDirection(currentY, "S") && binaryGrid[currentX][currentY+1] > 0) {
        pathValue = binaryGrid[currentX][currentY+1];
        pathSpots.push([currentX, currentY+1, pathValue]);
      }
      if (checkDirection(currentX, "W") && binaryGrid[currentX-1][currentY] > 0) {
        pathValue = binaryGrid[currentX-1][currentY];
        pathSpots.push([currentX-1, currentY, pathValue]);
      }

      binaryGrid[currentX][currentY] = -1;
      checkCoordinates.splice(0, 1);

      if (pathSpots.length > 0) {

        pathSpots.sort(function(a,b) {
          return a[2] - b[2];
        });

        for (let i = 0; i < pathSpots.length; i++) {
          pathX = pathSpots[i][0];
          pathY = pathSpots[i][1];
          checkCoordinates.push([pathX, pathY]);
          if (pathX == x2 && pathY == y2) {
            deadPath = true;
            goodPath = true;
          }
        }
      } else if (checkCoordinates.length == 0) {
        deadPath = true;
      }
    }

    return goodPath;
  }

  function compassCheck() {

    pressedNESW = Array.from(Array(4), () => new Array(4).fill(0));

    for (let i = 0; i < 4; i++) {
      x = cors[i][0];
      y = cors[i][1];
      color = grid[x][y];

      tmpCors = [];
      for (let m = 0; m < 5; m++) {
        for (let n = 0; n < 5; n++) {
          if (grid[m][n] == color) {
            tmpCors.push([m,n]);
          }
        }
      }

      for (let a = 0; a < tmpCors.length; a++) {
        if (tmpCors[a][0] < x) { pressedNESW[i][3] = pressedNESW[i][3] + 1; }
        if (tmpCors[a][0] > x) { pressedNESW[i][1] = pressedNESW[i][1] + 1; }
        if (tmpCors[a][1] < y) { pressedNESW[i][0] = pressedNESW[i][0] + 1; }
        if (tmpCors[a][1] > y) { pressedNESW[i][2] = pressedNESW[i][2] + 1; }
      }
    }

    return pressedNESW;
  }

  function randInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1) ) + min;
  }

  function shapeChecker(x, y) {
    shapes = [];
    if (checkDirection(y, "N") && checkDirection(x, "E")) {
      if (grid[x][y-1] == 0 && grid[x+1][y] == 0) {
        shapes.push(1);
      }
    }
    if (checkDirection(y, "S") && checkDirection(x, "E")) {
      if (grid[x][y+1] == 0 && grid[x+1][y] == 0) {
        shapes.push(2);
      }
    }
    if (checkDirection(y, "S") && checkDirection(x, "W")) {
      if (grid[x][y+1] == 0 && grid[x-1][y] == 0) {
        shapes.push(3);
      }
    }
    if (checkDirection(y, "N") && checkDirection(x, "W")) {
      if (grid[x][y-1] == 0 && grid[x-1][y] == 0) {
        shapes.push(4);
      }
    }
    if (checkDirection(y, "N") && checkDirection(y, "S")) {
      if (grid[x][y-1] == 0 && grid[x][y+1] == 0) {
        shapes.push(5);
      }
    }
    if (checkDirection(x, "E") && checkDirection(x, "W")) {
      if (grid[x+1][y] == 0 && grid[x-1][y] == 0) {
        shapes.push(6);
      }
    }
    return shapes;

  }

  function drawShape(x, y, c, s) {
    grid[x][y] = c;
    switch(s) {
      case 1:
        grid[x][y-1] = c;
        grid[x+1][y] = c;
        break;
      case 2:
        grid[x][y+1] = c;
        grid[x+1][y] = c;
        break;
      case 3:
        grid[x][y+1] = c;
        grid[x-1][y] = c;
        break;
      case 4:
        grid[x][y-1] = c;
        grid[x-1][y] = c;
        break;
      case 5:
        grid[x][y-1] = c;
        grid[x][y+1] = c;
        break;
      case 6:
        grid[x+1][y] = c;
        grid[x-1][y] = c;
        break;
      default:
        console.log("oops!");
    }
  }

  function randCompasses() {
    setC = 0;
    while (setC < 4) {
      x = randInt(0, 4);
      y = randInt(0, 4);
      shapes = shapeChecker(x, y);
      if (grid[x][y] == 0 && shapes.length > 0) {
        randex = randInt(0, (shapes.length - 1));
        shape = shapes[randex];
        setC += 1;
        drawShape(x, y, setC, shape);
        comp = [x,y];
        nesw = [0,0,0,0];
        cors.push(comp);
        compassNESW.push(nesw);
      }
    }
  }

  function availableSpots() {
    n = 0;
    for (let i = 0; i < 5; i++) {
      for (let j = 0; j < 5; j++) {
        if (grid[i][j] == 0) {
          n += 1;
        }
      }
    }
    return n;
  }

  function getAvailableSq(i) {

    n = 0;
    for (let x = 0; x < 5; x++)  {
      for (let y = 0; y < 5; y++) {
        if (grid[x][y] == 0) {
          n += 1;
          if (n == i) {
            return [x,y];
          }
        }
      }
    }
  }

  function getAdjacentColors(x, y) {
    adjacentColors = [];
    if (checkDirection(y, "N")) {
      if (grid[x][y-1] != 0) {
        adjacentColors.push(grid[x][y-1]);
      }
    }
    if (checkDirection(x, "E")) {
      if (grid[x+1][y] != 0) {
        adjacentColors.push(grid[x+1][y]);
      }
    }
    if (checkDirection(y, "S")) {
      if (grid[x][y+1] != 0) {
        adjacentColors.push(grid[x][y+1]);
      }
    }
    if (checkDirection(x, "W")) {
      if (grid[x-1][y] != 0) {
        adjacentColors.push(grid[x-1][y]);
      }
    }
    return adjacentColors;
  }

  function randPuzzle() {

    colorCounts = [0,0,0,0];
    spots = availableSpots();
    while (spots > 0) {
      spot = randInt(1, spots);
      sqCors = getAvailableSq(spot);
      sqx = sqCors[0];
      sqy = sqCors[1];
      adjacentColors = getAdjacentColors(sqx, sqy);
      if (adjacentColors.length == 1) {
        c = adjacentColors[0];
        grid[sqx][sqy] = c;
        colorCounts[c-1] += 1;
      } else if (adjacentColors.length > 1) {
        min = colorCounts[adjacentColors[0] - 1];
        mindex = 0;
        for (let i = 1; i < adjacentColors.length; i++) {
          c = colorCounts[adjacentColors[i] - 1];
          if (c < min) {
            min = c;
            mindex = i;
          }
        }
        c = adjacentColors[mindex];
        grid[sqx][sqy] = c;
        colorCounts[c-1] += 1;
      }
      spots = availableSpots();
    }
  }
});
